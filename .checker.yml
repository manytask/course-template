version: 1


# can be overwritten in .task.yml for individual tasks
structure:
  ignore_patterns: ["checker", ".git", ".idea", ".vscode", "__pycache__", ".venv", ".*_cache", "*.pyc"]
  # public patterns: include in export, overwrite during testing
  public_patterns: ["README.md", ".lecture", ".gitlab-ci-students.yml", "requirements.txt", "tools", "pyproject.toml", ".gitignore", "test_public.py", "conftest.py"]
  # private patterns: exclude from export, overwrite during testing
  private_patterns: [".*", "test_private.py"]


# default values for all tasks, can be overwritten in .task.yml params:
default_params:
  run_typechecking: true
  run_linting: true
  run_testing: true

  partially_scored: false

  run_merge_request_checks: true
  require_merge_request_approval: false
  search_for_merge_request_score: false

  timeout: 60  # seconds
  coverage: null  # 0..1, null for no measurement


# settings for export command, uses .deadlines.yml and `params` and each task params (in .task.yml)
export:
  destination: https://gitlab.manytask.org/test/public-test-repo
  default_branch: main
  commit_message: "chore(auto): export new tasks"
  templates: search  # search or create


# manytask settings, used in scores export (testing)
manytask:
  url: https://test.manytask.org
  course: "test"


# settings for Tester, uses .checker.yml and `params` and each task params (in .task.yml)
testing:
  changes_detection: branch_name  # branch_name, commit_message, last_commit_changes, files_changed

  search_plugins: ["tools/plugins"]

  # run once per repo
  global_pipeline:
    - name: "List temp dir"
      fail: fast  # fast, after_all, never
      run: "run_script"
      args:
        origin: ${{ TEMP_DIR }}
        script: "ls -la ."

    - name: "Fail never"
      fail: never  # fast, after_all, never
      run: "run_script"
      args:
        origin: ${{ TEMP_DIR }}
        script: "false"

    - name: "Greeting"
      fail: fast  # fast, after_all, never
      run: "run_script"
      args:
        origin: ${{ TEMP_DIR }}
        script: "echo ${{ TEMP_DIR }}"

  # run once per task
  tasks_pipeline:
    - name: "Check forbidden regexps"
      fail: fast  # fast, after_all, never
      run: "check_regexps"
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        patterns: ["**/*.py"]
        regexps: ["exit(0)"]

    - name: "Run linter"
      run_if: ${{ run_linting }}
      fail: after_all  # fast, after_all, never
      run: "run_script"
      args:
        origin: ${{ TEMP_DIR }}
        script: "python -m ruff --config=pyproject.toml ${{ TASK_SUB_PATH }}"

    - name: "Run typechecker"
      run_if: ${{ run_typechecking }}
      fail: after_all  # fast, after_all, never
      run: "run_script"
      args:
        origin: ${{ TEMP_DIR }}
        script: "python -m mypy --config-file=pyproject.toml ${{ TASK_SUB_PATH }}"

    - name: "Collect tests"
      run_if: ${{ run_testing }}
      fail: after_all  # fast, after_all, never
      run: "run_script"
      args:
        origin: ${{ TEMP_DIR }}
        script: "python -m pytest --tb=no -qq --collect-only ${{ TASK_SUB_PATH }}"
        timeout: ${{ timeout }}
#        isolate: true

    - name: "Run tests"
      run_if: ${{ run_testing }}
      fail: after_all  # fast, after_all, never
      run: "run_pytest"
      register_score: "test_score"
      args:
        origin: ${{ TEMP_DIR }}
        target: ${{ TASK_SUB_PATH }}
        timeout: ${{ timeout }}
        coverage: ${{ coverage }}
        partially_scored: ${{ partially_scored }}
#        isolate: true

#    - name: "Run Merge Request checks"
#      run_if: ${{ run_merge_request_checks }}
#      fail: after_all  # fast, after_all, never
#      run: "check_gitlab_merge_request"
#      args:
#        token: ${{ GITLAB_API_TOKEN }}
#        task_dir: ${{ TASK_SUB_PATH }}
#        repo_url: ${{ REPOSITORY_URL }}
#        requre_approval: ${{ require_merge_request_approval }}
#        search_for_score: ${{ search_for_merge_request_score }}

  # will run once per task only if task_pipeline NOT failed
  report_pipeline:
#    - name: "Search score in MR"
#      run_if: ${{ search_for_merge_request_score }}
#      run: "search_score_in_gitlab_merge_request"
#      register_score: "final_score"
#      args:
#        token: ${{ GITLAB_API_TOKEN }}
#        repo_url: ${{ REPOSITORY_URL }}
#        mr_label: ${{ TASK_NAME }}
#        score_by: "https://gitlab.manytask.org/test"

    - name: "Aggregate score"
      run_if: ${{ !search_for_merge_request_score }}
      run: "aggregate"
      register_score: "final_score"
      args:
        scores: ["${{ test_score }}"]
        weights: [1.0]
        strategy: "mean"  # mean, min, max, product, sum

    - name: "Report Score Manytask"
      run_if: ${{ !search_for_merge_request_score }}
      run: "report_score_manytask"
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        patterns: ["**/*.py"]
        username: ${{ USERNAME }}
        task_name: ${{ TASK_NAME }}
        score: ${{ final_score }}
