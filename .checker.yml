version: 1


# can be overwritten in .task.yml for individual tasks
structure:
  # private patterns exclude from export
  private_patterns: ["**/.*", "**/test_private.py"]
  # public patterns to export
  public_patterns: [".gitlab-ci-students.yml", "requirements.txt", "*.md", "**/README.md", "tools", "pyproject.toml", ".gitignore", "**/test_public.py", "**/conftest.py"]
  # explicit patterns allow to change by student
  allow_to_change_patterns: []


# default values for all tasks, can be overwritten in .task.yml params:
params:
  run_typechecking: true
  run_linting: true
  run_testing: true

  run_merge_request_checks: true
  require_merge_request_approval: false
  search_for_merge_request_score: false

  timeout: 60  # seconds
  coverage: null  # 0..1, null for no measurement


# settings for export command, uses .deadlines.yml and `params` and each task params (in .task.yml)
export:
  destination: https://gitlab.manytask.org/test/public-test-repo
  default_branch: main
  commit_message: "chore(auto): export new tasks"
  templates: search  # search or create


# manytask settings, used in scores export (testing)
manytask:
  url: https://test.manytask.org
  course: "test"


# settings for Tester, uses .checker.yml and `params` and each task params (in .task.yml)
testing:
  changes_detection: branch_name  # branch_name, commit_message, last_commit_changes, files_changed
  executor: sandbox  # sandbox or minijail

  search_plugins: ["tools/plugins"]

  # run once per repo
  global_pipeline:
    - name: "Greening"
      fail: fast  # fast, after_all, never
      run: "run_scrip"
      isolate: false
      args:
        origin: ${{ TEMP_DIR }}
        script: "echo ${{ TEMP_DIR }}"

    - name: "List temp dir"
      fail: fast  # fast, after_all, never
      run: "run_scrip"
      isolate: false
      args:
        origin: ${{ TEMP_DIR }}
        script: "ls -la ."

  # run once per task
  tasks_pipeline:
    - name: "Check forbidden regexps"
      fail: fast  # fast, after_all, never
      run: "check_regexps"
      isolate: false
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        regexps: ["exit(0)"]

    - name: "Run linter"
      run_if: ${{ run_linter }}
      fail: after_all  # fast, after_all, never
      run: "run_script"
      isolate: true
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        script: "python -m ruff --config=${{ REPO_DIR }}/pyproject.toml ${{ TASK_DIR }}"

    - name: "Run typechecker"
      run_if: ${{ run_typechecking }}
      fail: after_all  # fast, after_all, never
      run: "run_script"
      isolate: true
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        script: "python -m mypy --config-file=${{ REPO_DIR }}/pyproject.toml ${{ TASK_DIR }}"

    - name: "Collect tests"
      run_if: ${{ run_testing }}
      fail: after_all  # fast, after_all, never
      run: "run_script"
      isolate: true
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        script: "python -m pytest --tb=no -qq --collect-only ${{ TASK_DIR }}"
        timeout: ${{ timeout }}

    - name: "Run tests"
      run_if: ${{ run_testing }}
      fail: after_all  # fast, after_all, never
      run: "run_pytest"
      isolate: true
      args:
        origin: "${{ TEMP_DIR }}/${{ TASK_SUB_PATH }}"
        script: "python -m pytest -qq ${{ TASK_DIR }}"
        timeout: ${{ timeout }}

    - name: "Run Merge Request checks"
      run_if: ${{ run_merge_request_checks }}
      fail: after_all  # fast, after_all, never
      run: "check_gitlab_merge_request"
      isolate: false
      args:
        token: ${{ GITLAB_API_TOKEN }}
        task_dir: ${{ TASK_SUB_PATH }}
        repo_url: ${{ REPOSITORY_URL }}
        requre_approval: ${{ require_merge_request_approval }}
        search_for_score: ${{ search_for_merge_request_score }}
